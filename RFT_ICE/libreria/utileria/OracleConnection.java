package libreria.utileria;
import java.sql.Connection;
import java.sql.Driver;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;

public class OracleConnection {
	/**
	 * @author SS
	 * To establish a database connection in scripts generated by RFT, 
	 * 1) First install the JDBC driver (Propiedades / Via de construcción JAVA  / Bibliotecas / AñadorJARs externos
	 * Luego de hacer esto se acepta la sentencia "Driver driver = new oracle.jdbc.OracleDriver()"
	 * 2) Create a JDBC connection class (que es esta clase)
	 * 3) Add code to scripts to use this class.
	 * http://www.ibm.com/developerworks/rational/library/05/saracevic/
	 */
	public static void main(String[] args) throws SQLException
	   {
	      new OracleConnection();
	   }
	
	   OracleConnection() throws SQLException
	   {
	      connect();
	      // this.query();
	   }
	   Connection connection;

	   void connect() throws SQLException
	   {
	      Driver driver = new oracle.jdbc.OracleDriver();
	      DriverManager.registerDriver(driver);
	      connection = DriverManager.getConnection(
	    		  "jdbc:oracle:thin:@<hostname>:1521:<service>", "username", "password");
	      connection.setAutoCommit(true);

	   }

	   //------------------------------------------------------------------------------
	   // Metodo query
	   //------------------------------------------------------------------------------
	   void query() throws SQLException
	   {
	      ResultSet resultset = null;
	      Statement statement = null;
	      try
	      {
	         statement = connection.createStatement
	            (ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
	         resultset = statement.executeQuery("Select * from TAX_RETURN where rownum<=10 order by  1"); 
	         ResultSetMetaData rsmd = resultset.getMetaData();
	         int columns = rsmd.getColumnCount();
	         while (resultset.next())
	         {
	            for (int i = 0; i < columns; i++)
	            {
	               System.out.print(resultset.getObject(i + 1) + " ");
	            } // for
	            System.out.println();
	         } // while
	      }
	      finally
	      {
	         if (resultset != null)
	            try
	            {
	               resultset.close();
	            }
	            catch (Exception e)
	            {
	               e.printStackTrace();
	            }
	         if (statement != null)
	            try
	            {
	               statement.close();
	            }
	            catch (Exception e)
	            {
	               e.printStackTrace();
	            }
	         // if (connection != null) ...return to pool...
	      }

	   } 
	   //------------------------------------------------------------------------------
	   // Fin Metodo query
	   //------------------------------------------------------------------------------

	   //------------------------------------------------------------------------------
	   //executeQuery
	   //------------------------------------------------------------------------------
	   ResultSet query(String arg) throws SQLException
	   {
	      ResultSet resultset = null;
	      Statement statement = null;

	      try
	      {
	         statement = connection.createStatement
	            (ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
	         resultset = statement.executeQuery(arg);

	         ResultSetMetaData rsmd = resultset.getMetaData();
	         int columns = rsmd.getColumnCount();

	         while (resultset.next())
	         {

	            for (int i = 0; i < columns; i++)
	            {
	               System.out.print(resultset.getObject(i + 1) + " ");
	            } // for

	            System.out.println();
	         } // while

	      }
	      finally
	      {
	         if (resultset != null)
	            try
	            {
	               resultset.close();
	            }
	            catch (Exception e)
	            {
	               e.printStackTrace();
	            }
	         if (statement != null)
	            try
	            {
	               statement.close();
	            }
	            catch (Exception e)
	            {
	               e.printStackTrace();
	            }
	         // if (connection != null) ...return to pool...
	      }
	      return resultset;
	   } 
	   //------------------------------------------------------------------------------
	   //Fin executeQuery
	   //------------------------------------------------------------------------------
	}