package GUI;

import javax.swing.*;

import java.awt.event.*;
import java.awt.*;
import java.io.IOException;

public class CP05 extends JFrame  
{
	private JLabel nroCuentaL, planL, nroServicioL, SimInL, SimCoL, TerminalL, IMEICoL, IMEIInL;
	private JTextField nroCuentaTF, planTF, nroServicioTF, SimInTF, SimCoTF, TerminalTF, IMEICoTF, IMEIInTF;
	
		//Button handlers:
		private EjecutarButtonHandler ejbHandler;
		private ExitButtonHandler ebHandler;

	public CP05() // Constructor
	{	
		//Instanciar los labels
		 nroCuentaL = new JLabel();
	      nroCuentaL.setText("Numero de cuenta");
	      
	      planL = new JLabel();
	      planL.setText("Plan");
	      
	      nroServicioL = new JLabel();
	      nroServicioL.setText("Nuemero de Servicio");
	      
	      SimInL = new JLabel();
	      SimInL.setText("SIM Incorrecta");
	      
	      SimCoL = new JLabel();
	      SimCoL.setText("SIM Correcta");
	      
	      TerminalL = new JLabel();
	      TerminalL.setText("Terminal");
	      
	      IMEICoL = new JLabel();
	      IMEICoL.setText("IMEI Correcto");
	      
	      IMEIInL = new JLabel();
	      IMEIInL.setText("IMEI Incorrecto");

		//Intanciar los textos
		UsuarioTF = new JTextField();
	   // CasoTF = new JTextField();
		LoginTF = new JTextField();
		msjTF = new JTextField();
		//LoginTrue = new JRadioButton("true", true);
		//LoginFalse = new JRadioButton("False", false);

		//Instanciar los botones
		EjecutarB = new JButton("Ejecutar");
		exitB = new JButton("Salir");

		// Especificar el handler para cada botón
		ejbHandler = new EjecutarButtonHandler();
		ebHandler = new ExitButtonHandler();

		//add(register) ActionListeners para cada botón
		EjecutarB.addActionListener(ejbHandler);
		exitB.addActionListener(ebHandler);

		//Setear el titulo de la ventana
		setTitle("Automatizacion de Pruebas Regresivas");

		//Get the content pane (CP).
	    JPanel panelLabel  = new JPanel();
	    JPanel pane1  = new JPanel();
	    JPanel pane2  = new JPanel();
        JPanel pane3  = new JPanel();
	    Container paneFinal = getContentPane();
		
	      panelLabel.setLayout(new GridLayout(8,0));
	      panelLabel.add(nroCuentaL);
	      panelLabel.add(planL);
	      panelLabel.add(nroServicioL);
	      panelLabel.add(SimInL);
	      panelLabel.add(SimCoL);
	      panelLabel.add(TerminalL);
	      panelLabel.add(IMEICoL);
	      panelLabel.add(IMEIInL);

		pane1.setLayout(new GridLayout(7, 0));
		//Agregar al panel para indicar donde se quiere que aparezca (left to right, top to bottom)
		pane1.add(UsuarioTF);
		pane1.add(ClaveTF);
		pane1.add(CasoCB);
		pane1.add(AmbienteCB);
		pane1.add(LoginTF);
		//pane1.add(LoginTrue);
		//pane1.add(LoginFalse);
		pane1.add(msjTF);
		
		pane2.setLayout(new GridLayout(1,1));
	    pane2.setPreferredSize(new Dimension(400,200));
	    pane2.add(paneLabel);
	    pane2.add(pane1);
	    pane2.setBounds(100, 50, 600, 500); 
	    
	    pane3.setLayout(new FlowLayout());
	    pane3.setPreferredSize(new Dimension(200,50));
	    pane3.add(EjecutarB);
	    pane3.add(exitB);
	        
	    paneFinal.setLayout(new GridLayout(2,0));
	    paneFinal.add(pane2);
	    paneFinal.add(pane3);
	    paneFinal.setBounds(0, 100, 600, 500); 
		
		//Propiedades importantes del JFrame
		setSize(600, 300);
		setVisible(true);
		setLayout(new FlowLayout()); 
		setDefaultCloseOperation(EXIT_ON_CLOSE);
	}

	private class EjecutarButtonHandler implements ActionListener
	{
		public void actionPerformed(ActionEvent e)
		{
			msjTF.setText("Se va a ejecutar con "+ UsuarioTF.getText() + ClaveTF.getText() 
				+ CasoCB.getSelectedItem() + LoginTF.getText());
			setlineaComandos(UsuarioTF.getText()+" "+ClaveTF.getText() + AmbienteCB.getSelectedItem()
					+" "+ CasoCB.getSelectedItem() + " "+LoginTF.getText());	
			System.out.println("Tiene valor en" +getlineaComandos());
			String comando = getlineaComandos();
			try 
			{
				ComandoRFT(comando);
				
			}
			catch (Exception e1) 
			{
				e1.printStackTrace();
			}
		}
	}
	

	public class ExitButtonHandler implements ActionListener
	{
		public void actionPerformed(ActionEvent e)
		{
			System.exit(0);
		}
	}

	
	public static void ComandoRFT(String comando) throws Exception 
	{
		System.out.println("Se ejecuta con" +lineaComandos);
		System.out.println("Se ejecuta con" +comando);

			String RFT_JAR_PATH = "\"C:/Program Files (x86)/IBM/SDP/FunctionalTester/bin/rational_ft.jar\"";
			String commandLine="cmd /c start/wait "+ 
			"java -classpath "
			+ RFT_JAR_PATH + 
			" com.rational.test.ft.rational_ft -datastore " +
			"\"C:/Users/Sandra/IBM/rationalsdp/workspace/RFT_ICE/\" -iterationCount 1 " +
			" -playback \"Scripts.CasosPrueba.CasosPrueba\" " + "-args "
			+ lineaComandos + " false 1";
			
			System.out.println(commandLine);
			Process p = Runtime.getRuntime().exec(commandLine);
			p.waitFor();
	}

	
	public static void main (String[] args)  
	{
		CP05 EjectObj = new CP05();
		System.out.println("Se ejecuta con" +lineaComandos);
	}
}
